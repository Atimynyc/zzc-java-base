1.内部类是什么？
2.为什么要使用内部类，它有什么用？
3.如何实现？
    3.1 成员内部类
    3.2 局部内部类
    3.3 匿名内部类
    3.4 静态内部类

1.内部类是什么？
    在一个类的内部声明的类叫做内部类。

2.为什么要使用内部类，它有什么用？
    (1) 每个内部类都能独立的继承一个接口的实现，所以无论外部类是否已经继承了某个(接口的)实现，对于内部类都没有影响。内部类使得多继承的解决方案变得完整。
        即可以使一个类中有对一个接口的多种实现方式。
    (2) 方便将存在一定逻辑关系的类组织在一起，又可以对外界隐藏。
    (3) 方便编写事件驱动程序。
    (4) 方便编写线程代码。

3.如何实现？
    3.1 成员内部类
    成员内部类可以看成是【外部类的一个成员】，在成员内部类中无法声明静态成员，但static final字段是个例外。我们知道加载类时，会先初始化静态成员，
如果成员内部类有静态成员，那么内部类就会在外部类之前生成，而内部类是为外部类服务的，内部类在外部类之前就生成可能会脱离掌控。在实例化成员内部类时，
成员内部类会持有一个外部类当前对象的引用，这样在成员内部类中就可以直接访问外部类的成员，即使是private修饰的。

    3.2 局部内部类
    局部内部类的使用和成员内部类的使用基本一致，只是局部内部类定义在【外部类的方法】中，就像局部变量一样，并不是外部类的成员。局部内部类在方法外是
无法访问到的，但它的实例可以从方法中返回，并且实例在不再被引用之前会一直存在。局部内部类也可以访问所在方法的局部变量、方法参数等，限制是局部变量
或方法参数只有在声明为final时才能被访问。

    3.3 匿名内部类
    可以把匿名内部类想象成是没有类名的局部内部类，匿名内部类有以下特点：
    (1)匿名内部类不能有构造器，匿名内部类没有类名，肯定无法声明构造器。
    (2)匿名内部类必须实现一个接口，指定给new的类型为匿名类的超类型，匿名类不能有显示的extends或implements子句，也不能有任何修饰符。
    (3)匿名内部类和成员内部类、局部内部类一样，也不能声明静态成员。

    3.4 静态内部类
    静态内部类，有的书上也称为嵌套类，声明它时需要用static修饰符，静态内部类不同于前三种内部类，静态内部类不会持有外部类当前对象的引用，所以在
静态内部类中无法访问外部类的非静态成员，可以这么说，静态内部类不依赖于外部类。